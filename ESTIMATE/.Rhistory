View(g_l)
g_l = lapply(split(t1,t1$geneid),function(x){
tmp=apply(x,1,function(y){
y[2]:y[3]
})
length(unique(unlist(tmp)))
})
View(g_l)
# 再变成一个数据框
g_l=data.frame(gene_id=names(g_l),length=as.numeric(g_l))
View(g_l)
library(org.Mm.eg.db)
s2g=toTable(org.Mm.egSYMBOL)
a = g_l
View(s2g)
library(tidyverse)
colnames(g_l)
g_l %>%
left_join(s2g,by="gene_id")
t_l=t_l[order(t_l$gene_id,t_l$tx_len,decreasing = T),]
# 然后看到gene_id这一列，有重复的ID，另外最后一列的length值也不同，说明这里一个基因有多个不同长度的转录本
#
# 那么就对gene_id排序(为了让同样id的基因排在一起)，对tx_len排序(为了找最长的转录本)
t_l=transcriptLengths(txdb)
head(t_l)
# tx_id    tx_name gene_id nexon tx_len
# 1     1 uc007afg.1   18777     8   2355
# 2     2 uc007afh.1   18777     9   2433
# 3     3 uc007afi.2   21399    10   2671
# 4     4 uc011wht.1   21399    10   2668
# 5     5 uc011whu.1   21399    10   2564
# 6     6 uc057aty.1    <NA>     1   2719
# 发现有NA，去掉即可
t_l=na.omit(t_l)
head(t_l)
t_l=t_l[order(t_l$gene_id,t_l$tx_len,decreasing = T),]
head(t_l)
# tx_id    tx_name gene_id nexon tx_len
# 15232 15232 uc008vih.2   99982    20   3075
# 15231 15231 uc008vig.2   99982    19   3015
# 9376   9376 uc008pkr.1   99929     6   4154
# 11784 11784 uc008rsk.3   99899     8   2909
# 11479 11479 uc008rat.3   99890     2   3065
# 11480 11480 uc008rau.2   99890     1   2475
# 上面👆可以看到，99982这个基因就会选取第一个转录本15232，因为它的长度为3075
# 其实这样降序排列完，就可以直接去重，保留最长的那一个(就是第一个)了
t_l=t_l[!duplicated(t_l$gene_id),]
head(t_l)
ng=intersect(rownames(a),g_l$symbol)
# 得到的新表达矩阵=》有长度信息的基因表达矩阵
exprSet=a[ng,]
lengths=g_l[match(ng,g_l$symbol),2] #
head(lengths)
head(t_l)
View(g_l)
# 利用split(x,f)，需要一个x，一个f参数，其中x是向量或数据框，f是分组的因子。拆分完返回列表
split(t1,as.factor(t1$geneid))
rm(list = ls())
library(GenomicFeatures)
txdb <- makeTxDbFromGFF("./packages/gencode.v22.annotation.gtf",format="gtf")
#通过exonsBy获取每个gene上的所有外显子的起始位点和终止位点，然后用reduce去除掉重叠冗余的部分
#最后计算长度
exons_gene <- exonsBy(txdb, by = "gene")
exons_gene_lens <- lapply(exons_gene,function(x){sum(width(reduce(x)))})
View(exons_gene)
exons_gene1 <- unlist(exons_gene)
View(exons_gene1)
exons_gene1 <- unlist(exons_gene1)
exons_gene1 <- as.data.frame(exons_gene1)
exons_gene_lens <- lapply(exons_gene1,function(x){sum(width(reduce(x)))})
View(exons_gene)
promoters.data <- unlist(promoters(TxDb, upstream=len, downstream=len))
exons_gene_lens <- sapply(exons_gene,function(x){sum(width(reduce(x)))})
exons_gene_lens <-  for(i in exons_gene){
sum(width(reduce(i)))
}
exons_gene1
exons_gene_lens <- lapply(unlist(exons_gene),function(x){sum(width(reduce(x)))})
1+1
library("TxDb.Mmusculus.UCSC.mm10.knownGene")
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
## 下面是定义基因长度为 非冗余exon长度之和
if(F){
exon_txdb=exons(txdb)
genes_txdb=genes(txdb)
o = findOverlaps(exon_txdb,genes_txdb)
o
t1=exon_txdb[queryHits(o)]
t2=genes_txdb[subjectHits(o)]
t1=as.data.frame(t1)
t1$geneid=mcols(t2)[,1]
# 如果觉得速度不够，就参考R语言实现并行计算
# http://www.bio-info-trainee.com/956.html
g_l = lapply(split(t1,t1$geneid),function(x){
# x=split(t1,t1$geneid)[[1]]
head(x)
tmp=apply(x,1,function(y){
y[2]:y[3]
})
length(unique(unlist(tmp)))
})
head(g_l)
g_l=data.frame(gene_id=names(g_l),length=as.numeric(g_l))
save(g_l,file = 'step7-g_l.Rdata')
}
## 下面是定义基因长度为 最长转录本长度
if(T){
# 拿到所有基因的所有转录本长度信息
t_l=transcriptLengths(txdb)
head(t_l)
t_l=na.omit(t_l)
# 这里把同样的基因的多个转录本长度排序了
t_l=t_l[order(t_l$gene_id,t_l$tx_len,decreasing = T),]
str(t_l)
# 冗余的那些转录本都是长度比较小的，直接去除即可
t_l=t_l[!duplicated(t_l$gene_id),]
head(t_l)
g_l=t_l[,c(3,5)]
}
rm(list = ls())
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
## 下面是定义基因长度为 非冗余exon长度之和
if(T){
exon_txdb=exons(txdb)
genes_txdb=genes(txdb)
o = findOverlaps(exon_txdb,genes_txdb)
o
t1=exon_txdb[queryHits(o)]
t2=genes_txdb[subjectHits(o)]
t1=as.data.frame(t1)
t1$geneid=mcols(t2)[,1]
# 如果觉得速度不够，就参考R语言实现并行计算
# http://www.bio-info-trainee.com/956.html
g_l = lapply(split(t1,t1$geneid),function(x){
# x=split(t1,t1$geneid)[[1]]
head(x)
tmp=apply(x,1,function(y){
y[2]:y[3]
})
length(unique(unlist(tmp)))
})
head(g_l)
g_l=data.frame(gene_id=names(g_l),length=as.numeric(g_l))
save(g_l,file = 'step7-g_l.Rdata')
}
load(file = 'step09_step7-g_l.Rdata')
load(file = './Rdata/step09_step7-g_l.Rdata')
## 如果需要取同一个基因的多个转录本的长度平均值，上面代码稍微变化一下即可。
head(g_l)
s2g=toTable(org.Mm.egSYMBOL)
library(org.Mm.eg.db)
s2g=toTable(org.Mm.egSYMBOL)
head(s2g)
merge(g_l,s2g,by='gene_id')
View(g_l)
exon_txdb=exons(txdb)
genes_txdb=genes(txdb)
o = findOverlaps(exon_txdb,genes_txdb)
o
t1=exon_txdb[queryHits(o)]
t2=genes_txdb[subjectHits(o)]
t1=as.data.frame(t1)
t1$geneid=mcols(t2)[,1]
# 如果觉得速度不够，就参考R语言实现并行计算
# http://www.bio-info-trainee.com/956.html
g_l = lapply(split(t1,t1$geneid),function(x){
# x=split(t1,t1$geneid)[[1]]
head(x)
tmp=apply(x,1,function(y){
y[2]:y[3]
})
length(unique(unlist(tmp)))
})
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicFeatures")
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install("GenomicFeatures")
## 加载R包
library("GenomicFeatures")
## 去除外显子重叠部分，计算外显子长度
exons_gene_len <- lapply(exons_gene,function(x){sum(width(reduce(x)))})#暂时不能用
rm(list = ls())
library(GenomicFeatures)
txdb <- makeTxDbFromGFF("./packages/gencode.v22.annotation.gtf",format="gtf")
#通过exonsBy获取每个gene上的所有外显子的起始位点和终止位点，然后用reduce去除掉重叠冗余的部分
#最后计算长度
exons_gene <- exonsBy(txdb, by = "gene")
promoters.data <- unlist(promoters(TxDb, upstream=len, downstream=len))
exons_gene_lens <- lapply(exons_gene,function(x){sum(width(reduce(x)))})
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
## 下面是定义基因长度为 非冗余exon长度之和
if(T){
exon_txdb=exons(txdb)
genes_txdb=genes(txdb)
o = findOverlaps(exon_txdb,genes_txdb)
o
t1=exon_txdb[queryHits(o)]
t2=genes_txdb[subjectHits(o)]
t1=as.data.frame(t1)
t1$geneid=mcols(t2)[,1]
# 如果觉得速度不够，就参考R语言实现并行计算
# http://www.bio-info-trainee.com/956.html
g_l = lapply(split(t1,t1$geneid),function(x){
# x=split(t1,t1$geneid)[[1]]
head(x)
tmp=apply(x,1,function(y){
y[2]:y[3]
})
length(unique(unlist(tmp)))
})
head(g_l)
g_l=data.frame(gene_id=names(g_l),length=as.numeric(g_l))
save(g_l,file = './Rdata/step09_step7-g_l.Rdata')
}
rm(list = ls())
#曾建明
rm(list = ls())
options(stringsAsFactors = F)
genes_len=read.table("./Rdata/step10_gene_length.human.txt",stringsAsFactors=F)
head(genes_len)
colnames(genes_len)<- c("GeneName","Len")
head(genes_len)
load("./Rdata/GSE113120_mRNA_count.Rdata")
View(exprSet)
head(exprSet)
exprSet<-exprSet[ rownames(exprSet) %in% genes_len$GeneName ,]
total_count<- colSums(exprSet)
total_count<- colSums(as.numeric(exprSet))
View(exprSet)
colSums(exprSet)
colSums(as.numeric(exprSet))
colSums(unlist(as.numeric(exprSet)))
colSums(as.numeric(unlist(exprSet)))
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
rowSums(x); colSums(x)
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
View(x)
rowSums(x); colSums(x)
View(x)
exprSet <- as.matrix(exprSet)
View(exprSet)
head(exprSet)
total_count<- colSums(exprSet)
total_count<- colSums(as.numeric(exprSet))
total_count<- colSums(as.numeric(exprSet[drop = FALSE]))
load("./Rdata/GSE113120_mRNA_count.Rdata")
head(exprSet)
exprSet<-exprSet[ rownames(exprSet) %in% genes_len$GeneName ,]
colSums(as.numeric(exprSet$CPCG0100))
colSums(exprSet$CPCG0100)
a <- matrix(c(1, 2, 3, 4), nrow = 2)
rmask <- c(TRUE, FALSE)
b <- a[rmask, , drop=FALSE]
View(b)
View(a)
colSums(b)
colSums(a)
# exprSet <- as.matrix(exprSet)
total_count<- colSums(exprSet[,,drop=F])
colSums(as.numeric(exprSet[,,drop=F]))
exprSet <- as.matrix(exprSet)
exprSet[1:4,1:4]
colSums(as.numeric(exprSet[,,drop=F]))
exprSet <- as.numeric(as.matrix(exprSet))
exprSet[1:4,1:4]
exprSet[1:4,1:4]
load("./Rdata/GSE113120_mRNA_count.Rdata")
head(exprSet)
exprSet<-exprSet[ rownames(exprSet) %in% genes_len$GeneName ,]
exprSet <- as.numeric(as.matrix(exprSet))
exprSet[1:4,1:4]
load("./Rdata/GSE113120_mRNA_count.Rdata")
exprSet<-exprSet[ rownames(exprSet) %in% genes_len$GeneName ,]
aa <- exprSet
# GSM860181_priSG-A GSM860182_SG-A GSM860183_SG-B GSM860184_lepSC
# 00R_AC107638.2                 0              1              0               1
# 0610005C13Rik                 20             22             11              27
# 0610006L08Rik                  0              0              0               2
# 0610007P14Rik               2075           1785           1269            1430
# 0610009B22Rik                256            376            300             386
# 0610009E02Rik                 22             22             16              28
library(tidyverse)
exprSet <- as.tibble(exprSet)
str(exprSet)
exprSet <- as.numeric(exprSet)
head(exprSet)
as.data.frame(lapply(aa,as.numeric))
str(aa)
exprSet <- as.data.frame(lapply(exprSet,as.numeric))
str(exprSet)
exprSet[1:4,1:4]
colSums(as.numeric(exprSet[,,drop=F]))
colSums(exprSet)
total_count<- colSums(exprSet)
neededGeneLength=genes_len[  match(rownames(exprSet), genes_len$GeneName) ,2]
rpkm <- t(do.call( rbind,lapply(1:length(total_count),function(i){
10^9*exprSet[,i]/neededGeneLength/total_count[i]
}) ))
head(rpkm)
total_count
total_count <- as.data.frame(total_count)
View(total_count)
total_count <- total_count$total_count
neededGeneLength=genes_len[  match(rownames(exprSet), genes_len$GeneName) ,2]
neededGeneLength
View(genes_len)
View(genes_len)
View(exprSet)
load("./Rdata/GSE113120_mRNA_count.Rdata")
exprS.rown <- rownames(exprSet)
match(rownames(exprSet), genes_len$GeneName)
rownames(exprSet)
View(exprSet)
library(rio)
install.packages("rio")
library(rio)
exprSet <- rio::import("./Rdata/step01_expr_mRNA_count.csv",)
head(exprSet)
View(exprSet)
head(exprSet)
exprSet <- read.csv("./Rdata/step01_expr_mRNA_count.csv",header = TRUE)
exprSet <- read.csv("./Rdata/step01_expr_mRNA_count.csv",header = TRUE,row.names = T)
exprSet <- read.csv("./Rdata/step01_expr_mRNA_count.csv",header = TRUE,row.names = 1)
head(exprSet)
# GSM860181_priSG-A GSM860182_SG-A GSM860183_SG-B GSM860184_lepSC
# 00R_AC107638.2                 0              1              0               1
# 0610005C13Rik                 20             22             11              27
# 0610006L08Rik                  0              0              0               2
# 0610007P14Rik               2075           1785           1269            1430
# 0610009B22Rik                256            376            300             386
# 0610009E02Rik                 22             22             16              28
library(tidyverse)
exprSet<-exprSet[ rownames(exprSet) %in% genes_len$GeneName ,]
genes_len=read.table("./Rdata/step10_gene_length.human.txt",stringsAsFactors=F)
head(genes_len)
colnames(genes_len)<- c("GeneName","Len")
exprSet<-exprSet[ rownames(exprSet) %in% genes_len$GeneName ,]
aa <- exprSet
exprS.rown <- rownames(exprSet)
str(exprSet)
exprSet[1:4,1:4]
total_count<- colSums(exprSet)
total_count
[match(rownames(exprSet), genes_len$GeneName)
match(rownames(exprSet), genes_len$GeneName)
rownames(exprSet)
genes_len$GeneName
match(rownames(exprSet), genes_len$GeneName)
neededGeneLength=genes_len[match(rownames(exprSet), genes_len$GeneName),2]
neededGeneLength
rpkm <- t(do.call( rbind,lapply(1:length(total_count),function(i){
10^9*exprSet[,i]/neededGeneLength/total_count[i]
}) ))
rpkm
head(rpkm)
rownames(rpkm)=rownames(exprSet)
colnames(rpkm)=colnames(exprSet)
View(rpkm)
write.table(rpkm,file="./Rdata/step10_rpkm.txt",sep="\t",quote=F)
save(rpkm,file ="./Rdata/step10_rpkm.Rdata" )
write.csv(rpkm,file="./Rdata/step10_rpkm.csv")
rm(list=ls())
options(stringsAsFactors = F)
load("./Rdata/step10_rpkm.Rdata")
rm(list=ls())
options(stringsAsFactors = F)
mexprSet <- load("./Rdata/step10_rpkm.Rdata")
rm(list=ls())
options(stringsAsFactors = F)
load("./Rdata/step10_rpkm.Rdata")
View(rpkm)
mexprSet <- as.data.frame(rpkm)
cexprSet <- read.csv("./Rdata/GSE113120_circRNA_RPKM_CPC.csv",row.names = 1)
View(cexprSet)
load("H:/科研/其他资料/circRNARPKM/microenvironment/microenviorment/Rdata/TCGA_RPKM_8circRNA.Rdata")
View(expr)
# cexprSet <- read.csv("./Rdata/GSE113120_circRNA_RPKM_CPC.csv",row.names = 1)
cexprSet <- expr
rm(list=ls())
options(stringsAsFactors = F)
library(openxlsx)
library(tidyverse)
load(file = './data/ICGC_exp.Rdata')
library(tidyverse)
load(file = './data/ICGC_exp.Rdata')
#读取文件
library(tidyverse)
library(openxlsx)
data <- read.csv('./Rdata/GSE113120_mRNAexpr_not_raw.csv')
View(data)
load('./Rdata/GSE113120_mRNA_count.Rdata')
View(exprSet)
View(data)
load(file='./data/GSE113120_mRNA_expr.Rdata')
load(file='./Rdata/GSE113120_mRNA_expr_norm.Rdata')
View(exprSet)
rt <- exprSet
geneID <- rownames(exprSet)
rt <- cbind(geneID,exprSet)
rownames(exprSet) <- NULL
load('./Rdata/sysdata.rda')
View(rt)
colnames(biotype)
expran <- rt%>%
left_join(biotype,c('geneID'='geneSymbol'))
expran <- expran[!is.na(expran$group),]
expran <- expran[!duplicated(expran$geneID),]
expran <- expran[,c(1,146:150,2:145)]
expran[1:4,1:5]
as.data.frame(table(expran$biotype))
as.data.frame(table(expran$group))
View(expran)
write.csv(expran,'./Rdata/step01_expr_all_nor_annotation.csv',row.names = F)
save(expran,file="./Rdata/GSE113120_mRNA_expr_norm_anno.Rdata")
rm(list = ls())
options(stringsAsFactors = F)
load('./Rdata/sysdata.rda')
library(rio)
tcga <- import("H:/perl/perl_TCGA_PRAD/08ARGexp/gene.txt")
View(tcga)
tcga <- import("H:/perl/perl_TCGA_PRAD/07biotype/symbol.txt")
rm(list = ls())
options(stringsAsFactors = F)
library(rio)
rt <- import("H:/perl/perl_TCGA_PRAD/07biotype/symbol.txt")
rt[1:4,1:4]
rt=as.matrix(rt)
View(rt)
rownames(rt)=rt[,1]
load('./Rdata/sysdata.rda')
colnames(biotype)
colnames(rt)
rolnames(rt)
View(biotype)
expran <- rt%>%
left_join(biotype,c('id'='geneSymbol'))
#读取文件
library(tidyverse)
expran <- rt%>%
left_join(biotype,c('id'='geneSymbol'))
View(expran)
expran <- expran[!is.na(expran$group),]
expran <- expran[!duplicated(expran$geneID),]
expran <- rt%>%
left_join(biotype,c('id'='geneSymbol'))
expran <- expran[!is.na(expran$group),]
expran <- expran[!is.na(expran$id),]
expran <- expran[!duplicated(expran$id),]
View(expran)
expran <- expran[,c(1,553:557,2:552)]
View(expran)
expran[1:4,1:5]
as.data.frame(table(expran$biotype))
as.data.frame(table(expran$group))
write.csv(expran,'H:/perl/perl_TCGA_PRAD/07biotype/symbol_symbol.csv',row.names = F)
rm(list = ls())
rm(list=ls())
options(stringsAsFactors = F)
getwd()
#expr=read.csv('./Rdata/step01_expr_mRNA_count.csv',header = T)
#rownames(expr) <- expr[,1]
#expr <- expr[,2:145]
Rdata_dir='./Rdata/'
Figure_dir='./figures/'
#save(expr,exprSet,meta,phe,file = './Rdata/step06_TCGA_RPKM_mRNA_count.Rdata')
# 加载上一步从RTCGA.miRNASeq包里面提取miRNA表达矩阵和对应的样本临床信息。
load( file =
'./Rdata/step06_TCGA_RPKM_mRNA_count.Rdata')
dim(expr)
dim(meta)
# 这里需要解析TCGA数据库的ID规律，来判断样本归类问题。
group_list=meta[,18]
table(group_list)
exprSet=na.omit(expr)
source('./scripts/functions.R')
library(DESeq2)
library(tidyverse)
(colData <- data.frame(row.names=colnames(exprSet),
group_list=group_list) )
dds <- DESeqDataSetFromMatrix(countData = exprSet,
colData = colData,
design = ~ group_list)
tmp_f=file.path(Rdata_dir,'TCGA-KIRC-mRNA-DESeq2-dds.Rdata')
load(file = tmp_f)
View(dds)
res <- results(dds,
contrast=c("group_list","high","low"))
View(res)
resOrdered <- res[order(res$padj),]
View(resOrdered)
head(resOrdered)
load(file = tmp_f)
res <- results(dds,
contrast=c("group_list","high","low"))
resOrdered <- res[order(res$padj),]
head(resOrdered)
DEG =as.data.frame(resOrdered)
DESeq2_DEG = na.omit(DEG)
View(DESeq2_DEG)
nrDEG=DESeq2_DEG[,c(2,6)]
View(nrDEG)
colnames(nrDEG)=c('log2FoldChange','pvalue')
View(nrDEG)
View(nrDEG)
rm(list = ls())
library(survival)
library(rms)
