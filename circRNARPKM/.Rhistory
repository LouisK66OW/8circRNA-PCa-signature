function(x) surv(5, x)),
funlabel=c("1-year BCR Probability", "5-year BCR Probability"),
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95,0.99))
plot(nom.cox)
nom.cox <- nomogram(res.cox,
fun=list(function(x) surv(5, x),
function(x) surv(10, x)),
funlabel=c("1-year BCR Probability", "5-year BCR Probability"),
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95,0.99))
plot(nom.cox)
nom.cox <- nomogram(res.cox,
fun=list(function(x) surv(1, x),
function(x) surv(10, x)),
funlabel=c("1-year BCR Probability", "5-year BCR Probability"),
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95,0.99))
plot(nom.cox)
nom.cox <- nomogram(res.cox,
fun=list(function(x) surv(0.5, x),
function(x) surv(5, x)),
funlabel=c("1-year BCR Probability", "5-year BCR Probability"),
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95,0.99))
plot(nom.cox)
nom.cox <- nomogram(res.cox,
fun=list(function(x) surv(0.5, x),
funlabel="5-year BCR Probability",
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95)))
#构建COX模型,绘制诺莫图
res.cox <- psm(Surv(TBCR, BCR) ~ Age+Metastasis+TimetoMetastasis+PSA+`Clinical_T-category`+Gleason+Rscore, data = meta,dist='lognormal')
surv <- Survival(res.cox) # 构建生存概率函数
nom.cox <- nomogram(res.cox,
fun=list(function(x) surv(0.5, x),
funlabel="5-year BCR Probability",
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95)))
nom.cox <- nomogram(res.cox,
fun=function(x) surv(0.5, x),
funlabel="5-year BCR Probability",
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95))
plot(nom.cox)
library(export)
graph2ppt("./figures/nomogram.ppt")
plot(nom.cox)
library(export)
graph2ppt("./figures/nomogram.ppt")
graph2ppt("./figures/nomogram.pptx")
library(export)
graph2ppt("./figures/nomogram.pptx")
graph2ppt(file="./figures/nomogram.pptx")
graph2ppt(file="./figures/nomogram.pptx",width = 1.5,height = 1)
graph2ppt(file="./figures/nomogram.pptx")
pdf("./figures/nomogram.pdf")
plot(nom.cox)
dev.off()
install.packages("regplot")
library(regplot)
library("survival")
library("survminer")
#载入并查看数据集
data("lung")
head(lung)
str(lung)#该数据将所有变量都转换为数值型，包括性别(1,2表示)，分期(1,2,3,4表示)等。
#lung$sex=as.factor(lung$sex) #直接将数字型因子化,默认从小到大
lung$sex <- as.factor(ifelse(lung$sex==1,"male","female"))#将数值转化为真实属性后再因子化
#构建cox模型
res.cox <- coxph(Surv(time, status) ~ age+sex+ph.ecog+ph.karno+pat.karno, data = lung)
#绘制列线图, #因子化分类变量每个协变量用方框表示，数值型变量以连续性坐标轴表示。
nom1<-regplot(res.cox, clickable=TRUE,
points=TRUE, rank="sd",failtime = c(180,365),prfail = T)
#指定标记的样本行
nom2<-regplot(res.cox,observation=lung[3,], clickable=TRUE,
points=TRUE, rank="sd",failtime = c(180,365),droplines=T,prfail = T,
other=(list(bvcol="red",sq="green",obscol="blue")))
rm(list = ls())
library(survival)
library(rms)
#载入并查看数据集
data("lung") #status中1代表活着,2代表死了. sex中male=1,female=2
head(lung)
#=================================================================================
#mywork type1------
#=================================================================================
rm(list = ls())
library(survival)
library(rms)
#载入并查看数据集
load(file =
file.path('Rdata/','TCGA_RPKM_8circRNA_ROC_patch.Rdata'))
#关键步骤：按照nomogram要求“打包”数据
ddist <- datadist(meta)
options(datadist="ddist")
#构建COX模型,绘制诺莫图
res.cox <- psm(Surv(TBCR, BCR) ~ Age+Metastasis+TimetoMetastasis+PSA+`Clinical_T-category`+Gleason+Rscore, data = meta,dist='lognormal')
surv <- Survival(res.cox) # 构建生存概率函数
#构建COX模型,绘制诺莫图
res.cox <- psm(Surv(TBCR, BCR) ~ Age+PSA+`Clinical_T-category`+Gleason+Rscore, data = meta,dist='lognormal')
surv <- Survival(res.cox) # 构建生存概率函数
nom.cox <- nomogram(res.cox,
fun=function(x) surv(0.5, x),
funlabel="5-year BCR Probability",
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95))
plot(nom.cox)
library(export)
graph2ppt(file="./figures/nomogram.pptx")
pdf("./figures/nomogram.pdf")
plot(nom.cox)
dev.off()
colnames(meta)
#构建COX模型,绘制诺莫图
res.cox <- psm(Surv(TBCR, BCR) ~ age_group+PSA+`Clinical_T-category`+Gleason+Rscore, data = meta,dist='lognormal')
surv <- Survival(res.cox) # 构建生存概率函数
nom.cox <- nomogram(res.cox,
fun=function(x) surv(0.5, x),
funlabel="5-year BCR Probability",
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95))
plot(nom.cox)
res.cox <- psm(Surv(TBCR, BCR) ~ PSA+`Clinical_T-category`+Gleason+Rscore, data = meta,dist='lognormal')
surv <- Survival(res.cox) # 构建生存概率函数
nom.cox <- nomogram(res.cox,
fun=function(x) surv(0.5, x),
funlabel="5-year BCR Probability",
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95))
plot(nom.cox)
library(export)
graph2ppt(file="./figures/nomogram_noAge.pptx")
pdf("./figures/nomogram_noAge.pdf")
plot(nom.cox)
dev.off()
#=================================================================================
#mywork type1------
#=================================================================================
rm(list = ls())
library(survival)
library(rms)
#载入并查看数据集
load(file =
file.path('Rdata/','TCGA_RPKM_8circRNA_ROC_patch.Rdata'))
#关键步骤：按照nomogram要求“打包”数据
ddist <- datadist(meta)
options(datadist="ddist")
#构建COX模型,绘制诺莫图
res.cox <- psm(Surv(TBCR, BCR) ~ Age+PSA+`Clinical_T-category`+Gleason+Rscore, data = meta,dist='lognormal')
res.cox <- psm(Surv(TBCR, BCR) ~ PSA+`Clinical_T-category`+Gleason+Rscore, data = meta,dist='lognormal')
surv <- Survival(res.cox) # 构建生存概率函数
nom.cox <- nomogram(res.cox,
fun=function(x) surv(0.5, x),
funlabel="5-year BCR Probability",
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95))
plot(nom.cox)
nom.cox <- nomogram(res.cox,
fun=function(x) surv(5, x),
funlabel="5-year BCR Probability",
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95))
plot(nom.cox)
nom.cox <- nomogram(res.cox,
fun=function(x) surv(10, x),
funlabel="5-year BCR Probability",
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95))
plot(nom.cox)
meta$ID=="CPCG0350"
meta <- meta[!meta$ID=="CPCG0350",]
#关键步骤：按照nomogram要求“打包”数据
ddist <- datadist(meta)
options(datadist="ddist")
#构建COX模型,绘制诺莫图
res.cox <- psm(Surv(TBCR, BCR) ~ Age+PSA+`Clinical_T-category`+Gleason+Rscore, data = meta,dist='lognormal')
res.cox <- psm(Surv(TBCR, BCR) ~ PSA+`Clinical_T-category`+Gleason+Rscore, data = meta,dist='lognormal')
surv <- Survival(res.cox) # 构建生存概率函数
nom.cox <- nomogram(res.cox,
fun=function(x) surv(10, x),
funlabel="5-year BCR Probability",
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95))
plot(nom.cox)
library(survival)
library(rms)
#载入并查看数据集
load(file =
file.path('Rdata/','TCGA_RPKM_8circRNA_ROC_patch.Rdata'))
nom.cox <- nomogram(res.cox,lp=F,
fun=function(x) surv(10, x),
funlabel="5-year BCR Probability",
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95))
plot(nom.cox)
plot(nom.cox)
library(export)
graph2ppt(file="./figures/nomogram_noAgeLinerprediction.pptx")
pdf("./figures/nomogram_noAgeLinerprediction.pdf")
plot(nom.cox)
dev.off()
nom.cox <- nomogram(res.cox,lp=F,
fun=function(x) surv(10, x),
funlabel="5-year BCR-free Probability",
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95))
plot(nom.cox)
library(export)
graph2ppt(file="./figures/nomogram_noAgeLinerprediction.pptx")
pdf("./figures/nomogram_noAgeLinerprediction.pdf")
plot(nom.cox)
dev.off()
cal < -calibrate(res.cox, cmethod = "KM",method = "boot" , u = 3 or 5, m = 100, B = 1000)
cal < -calibrate(res.cox, cmethod = "KM",method = "boot" , u =  5, m = 100, B = 1000)
cal <-calibrate(res.cox, cmethod = "KM",method = "boot" , u =  5, m = 100, B = 1000)
coxm <- cph(surv(TBCR,BCR) ~ PSA+`Clinical_T-category`+Gleason+Rscore,x = T, y = T,data = meta,surv = T)
S<-Surv(TBCR,BCR)
S<-with(meta,Surv(TBCR, BCR))
library(survival)
library(rms)
coxm <- cph(S ~ PSA+`Clinical_T-category`+Gleason+Rscore,x = T, y = T,data = meta,surv = T)
coxm <- cph(S ~ PSA+`Clinical_T-category`+Gleason+Rscore,x = T, y = T,data = meta)
# 计算C-index
f <- coxph(Surv(TBCR, BCR==1)~PSA+`Clinical_T-category`+Gleason+Rscore, data = meta)
str(meta)
sum.surv <- summary(f)
c_index <- sum.surv$concordance
c_index
cal <- calibrate(res.cox, cmethod = "KM",method = "boot" , u =  5, u=60, m = 100, B = 1000)
cal <- calibrate(res.cox, cmethod = "KM",method = "boot" , u =  5,  m = 100, B = 1000)
coxm <- cph(Surv(TBCR,BCR==1)~PSA+`Clinical_T-category`+Gleason+Rscore,x=T,y=T,data = meta,surv = T)
cal <- calibrate(res.cox, cmethod = "KM",method = "boot" , u =  5,  m = 144, B = 1000)
n <- 400
set.seed(1)
age <- rnorm(n, 50, 12)
sex <- factor(sample(c('Female','Male'),n,TRUE))
dd <- datadist(age,sex)
options(datadist='dd')
# Population hazard function:
h <- .02*exp(.06*(age-50)+.8*(sex=='Female'))
d.time <- -log(runif(n))/h
cens <- 15*runif(n)
death <- ifelse(d.time <= cens,1,0)
d.time <- pmin(d.time, cens)
f <- psm(Surv(d.time,death) ~ sex*pol(age,2),
dist='lognormal')
anova(f)
fastbw(f)  # if deletes sex while keeping age*sex ignore the result
f <- update(f, x=TRUE,y=TRUE)       # so can validate, compute certain resids
validate(f, B=10)      # ordinarily use B=300 or more
plot(Predict(f, age, sex))   # needs datadist since no explicit age, hosp.
# Could have used ggplot(Predict(...))
survplot(f, age=c(20,60))     # needs datadist since hospital not set here
S <- Survival(f)
plot(f$linear.predictors, S(6, f$linear.predictors),
xlab=expression(X*hat(beta)),
ylab=expression(S(6,X*hat(beta))))
times <- seq(0,24,by=.25)
plot(times, S(times,0), type='l')   # plots survival curve at X*Beta hat=0
lam <- Hazard(f)
plot(times, lam(times,0), type='l') # similarly for hazard function
med <- Quantile(f)        # new function defaults to computing median only
lp <- seq(-3, 5, by=.1)
plot(lp, med(lp=lp), ylab="Median Survival Time")
med(c(.25,.5), f$linear.predictors)
# fit a model with no predictors
f <- psm(Surv(d.time,death) ~ 1, dist="weibull")
f
pphsm(f)          # print proportional hazards form
g <- survest(f)
plot(g$time, g$surv, xlab='Time', type='l',
ylab=expression(S(t)))
f <- psm(Surv(d.time,death) ~ age,
dist="loglogistic", y=TRUE)
r <- resid(f, 'cens') # note abbreviation
survplot(npsurv(r ~ 1), conf='none')
# plot Kaplan-Meier estimate of
# survival function of standardized residuals
survplot(npsurv(r ~ cut2(age, g=2)), conf='none')
# both strata should be n(0,1)
lines(r)              # add theoretical survival function
#More simply:
survplot(r, age, g=2)
options(datadist=NULL)
# 计算C-index
rcorrcens(Surv(TBCR,BCR) ~ predict(res.cox), data =  meta)
res.cox <- psm(Surv(TBCR, BCR) ~ PSA+`Clinical_T-category`+Gleason+Rscore, data = meta,dist='lognormal')
surv <- Survival(res.cox) # 构建生存概率函数
nom.cox <- nomogram(res.cox,lp=F,
fun=function(x) surv(10, x),
funlabel="5-year BCR-free Probability",
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95))
plot(nom.cox)
# 计算C-index
rcorrcens(Surv(TBCR,BCR) ~ predict(res.cox), data =  meta)
f <- coxph(Surv(TBCR, BCR==1)~PSA+`Clinical_T-category`+Gleason+Rscore, data = meta)
sum.surv <- summary(f)
c_index <- sum.surv$concordance
c_index
## 第二步 绘制校正曲线
## 参数说明：
## 1、绘制校正曲线前需要在模型函数中添加参数x=T, y=T，详细参考帮助
## 2、u需要与之前模型中定义好的time.inc一致，即365或730；
## 3、m要根据样本量来确定，由于标准曲线一般将所有样本分为3组（在图中显示3个点）
## 而m代表每组的样本量数，因此m*3应该等于或近似等于样本量；
## 4、b代表最大再抽样的样本量
## 重新调整模型函数f2，也即添加x=T, y=T
f2 <- psm(Surv(TBCR,BCR) ~ PSA+`Clinical_T-category`+Gleason+Rscore, data = meta, x=T, y=T, dist='lognormal')
## 构建校正曲线
cal1 <- calibrate(f2, cmethod='KM', method="boot", u=5, m=144, B=144)
## 绘制校正曲线，??rms::calibrate查看详细参数说明
par(mar=c(8,5,3,2),cex = 1.0)
plot(cal1,lwd=2,lty=1,
errbar.col=c(rgb(0,118,192,maxColorValue=255)),
xlim=c(0.25,0.6),ylim=c(0.15,0.70),
xlab="Nomogram-Predicted Probability of 1-Year DFS",
ylab="Actual 1-Year DFS (proportion)",
col=c(rgb(192,98,83,maxColorValue=255)))
??rms::calibrate
## 第二步 绘制校正曲线
## 参数说明：
## 1、绘制校正曲线前需要在模型函数中添加参数x=T, y=T，详细参考帮助
## 2、u需要与之前模型中定义好的time.inc一致，即365或730；
## 3、m要根据样本量来确定，由于标准曲线一般将所有样本分为3组（在图中显示3个点）
## 而m代表每组的样本量数，因此m*3应该等于或近似等于样本量；
## 4、b代表最大再抽样的样本量
## 重新调整模型函数f2，也即添加x=T, y=T
f2 <- psm(Surv(TBCR,BCR) ~ PSA+`Clinical_T-category`+Gleason+Rscore, data = meta, x=T, y=T, dist='lognormal')
## 构建校正曲线
cal1 <- calibrate(f2, cmethod='KM', method="boot", u=5, m=144, B=144)
plot(cal1,lwd=2,lty=1,
errbar.col=c(rgb(0,118,192,maxColorValue=255)),
xlim=c(0.25,0.6),ylim=c(0.15,0.70),
xlab="Nomogram-Predicted Probability of 1-Year DFS",
ylab="Actual 5-Year DFS (proportion)",
col=c(rgb(192,98,83,maxColorValue=255)))
plot(cal1)#,lwd=2,lty=1,
plot(cal1,lwd=2,lty=1,
errbar.col=c(rgb(0,118,192,maxColorValue=255)))#,
plot(cal1,lwd=2,lty=1,
errbar.col=c(rgb(0,118,192,maxColorValue=255)),
xlim=c(0.25,0.6),ylim=c(0.15,0.70),
xlab="Nomogram-Predicted Probability of 1-Year DFS",
ylab="Actual 5-Year DFS (proportion)")#,
plot(cal1,lwd=2,lty=1,
errbar.col=c(rgb(0,118,192,maxColorValue=255)),
xlim=c(0.25,1),ylim=c(0.15,1),
xlab="Nomogram-Predicted Probability of 1-Year DFS",
ylab="Actual 5-Year DFS (proportion)"),
col=c(rgb(192,98,83,maxColorValue=255)))
plot(cal1,lwd=2,lty=1,
errbar.col=c(rgb(0,118,192,maxColorValue=255)),
xlim=c(0.25,1),ylim=c(0.15,1),
xlab="Nomogram-Predicted Probability of 1-Year DFS",
ylab="Actual 5-Year DFS (proportion)",
col=c(rgb(192,98,83,maxColorValue=255)))
plot(cal1,lwd=2,lty=1,
errbar.col=c(rgb(0,118,192,maxColorValue=255)),
xlim=c(0.6,1),ylim=c(0.6,1),
xlab="Nomogram-Predicted Probability of 1-Year DFS",
ylab="Actual 5-Year DFS (proportion)",
col=c(rgb(192,98,83,maxColorValue=255)))
plot(cal1,lwd=2,lty=1,
errbar.col=c(rgb(0,118,192,maxColorValue=255)),
xlim=c(0.8,1),ylim=c(0.8,1),
xlab="Nomogram-Predicted Probability of 1-Year DFS",
ylab="Actual 5-Year DFS (proportion)",
col=c(rgb(192,98,83,maxColorValue=255)))
plot(cal1,lwd=2,lty=1,
errbar.col=c(rgb(0,118,192,maxColorValue=255)),
xlim=c(0.7,1),ylim=c(0.7,1),
xlab="Nomogram-Predicted Probability of 1-Year DFS",
ylab="Actual 5-Year DFS (proportion)",
col=c(rgb(192,98,83,maxColorValue=255)))
library(export)
graph2ppt(file="./figures/StandardCurve.pptx")
pdf("./figures/StandardCurve.pptx")
plot(cal1,lwd=2,lty=1,
errbar.col=c(rgb(0,118,192,maxColorValue=255)),
xlim=c(0.7,1),ylim=c(0.7,1),
xlab="Nomogram-Predicted Probability of 1-Year DFS",
ylab="Actual 5-Year DFS (proportion)",
col=c(rgb(192,98,83,maxColorValue=255)))
dev.off()
pdf("./figures/StandardCurve.pdf")
p <- plot(cal1,lwd=2,lty=1,
errbar.col=c(rgb(0,118,192,maxColorValue=255)),
xlim=c(0.7,1),ylim=c(0.7,1),
xlab="Nomogram-Predicted Probability of 1-Year DFS",
ylab="Actual 5-Year DFS (proportion)",
col=c(rgb(192,98,83,maxColorValue=255)))
p
dev.off()
p
p <- plot(cal1,lwd=2,lty=1,
errbar.col=c(rgb(0,118,192,maxColorValue=255)),
xlim=c(0.7,1),ylim=c(0.7,1),
xlab="Nomogram-Predicted Probability of 1-Year DFS",
ylab="Actual 5-Year DFS (proportion)",
col=c(rgb(192,98,83,maxColorValue=255)))
p
plot(cal1,lwd=2,lty=1,
errbar.col=c(rgb(0,118,192,maxColorValue=255)),
xlim=c(0.7,1),ylim=c(0.7,1),
xlab="Nomogram-Predicted Probability of 1-Year DFS",
ylab="Actual 5-Year DFS (proportion)",
col=c(rgb(192,98,83,maxColorValue=255)))
pdf("./figures/StandardCurve.pdf")
plot(cal1,lwd=2,lty=1,
errbar.col=c(rgb(0,118,192,maxColorValue=255)),
xlim=c(0.7,1),ylim=c(0.7,1),
xlab="Nomogram-Predicted Probability of 1-Year DFS",
ylab="Actual 5-Year DFS (proportion)",
col=c(rgb(192,98,83,maxColorValue=255)))
#运行上述plot
dev.off()
# 计算C-index
#方法一
rcorrcens(Surv(TBCR,BCR) ~ predict(res.cox), data =  meta)
#=================================================================================
#mywork type1------
#=================================================================================
rm(list = ls())
library(survival)
library(rms)
#载入并查看数据集
load(file =
file.path('Rdata/','TCGA_RPKM_8circRNA_ROC_patch.Rdata'))
# meta <- meta[!meta$ID=="CPCG0350",]
#关键步骤：按照nomogram要求“打包”数据
ddist <- datadist(meta)
options(datadist="ddist")
#构建COX模型,绘制诺莫图
res.cox <- psm(Surv(TBCR, BCR) ~ Age+PSA+`Clinical_T-category`+Gleason+Rscore, data = meta,dist='lognormal')
res.cox <- psm(Surv(TBCR, BCR) ~ PSA+`Clinical_T-category`+Gleason+Rscore, data = meta,dist='lognormal')
surv <- Survival(res.cox) # 构建生存概率函数
nom.cox <- nomogram(res.cox,lp=F,
fun=function(x) surv(10, x),
funlabel="5-year BCR-free Probability",
maxscale=10,
fun.at=c(0.01,seq(0.1,0.9,by=0.2),0.95))
plot(nom.cox)
# 计算C-index
#方法一
rcorrcens(Surv(TBCR,BCR) ~ predict(res.cox), data =  meta)
#====================================================================================
## 第二步 绘制校正曲线------
#====================================================================================
## 参数说明：
## 1、绘制校正曲线前需要在模型函数中添加参数x=T, y=T，详细参考帮助
## 2、u需要与之前模型中定义好的time.inc一致，即365或730；
## 3、m要根据样本量来确定，由于标准曲线一般将所有样本分为3组（在图中显示3个点）
## 而m代表每组的样本量数，因此m*3应该等于或近似等于样本量；
## 4、b代表最大再抽样的样本量
## 重新调整模型函数f2，也即添加x=T, y=T
f2 <- psm(Surv(TBCR,BCR) ~ PSA+`Clinical_T-category`+Gleason+Rscore, data = meta, x=T, y=T, dist='lognormal')
## 构建校正曲线
cal1 <- calibrate(f2, cmethod='KM', method="boot", u=5, m=144, B=144)
## 绘制校正曲线，??rms::calibrate查看详细参数说明
par(mar=c(8,5,3,2),cex = 1.0)
plot(cal1,lwd=2,lty=1,
errbar.col=c(rgb(0,118,192,maxColorValue=255)),
xlim=c(0.7,1),ylim=c(0.7,1),
xlab="Nomogram-Predicted Probability of 1-Year DFS",
ylab="Actual 5-Year DFS (proportion)",
col=c(rgb(192,98,83,maxColorValue=255)))
library(export)
graph2ppt(file="./figures/StandardCurve.pptx")
library(survival)
library(survminer)
sfit <- survfit(Surv(TBCR,BCR )~Rscore_group, data=meta)
sfit
summary(sfit)
ggsurvplot(sfit, conf.int=F, pval=TRUE)
## more complicate figures.
ggsurvplot(sfit,palette = c("#E7B800", "#2E9FDF"),
risk.table =TRUE,pval =TRUE,
conf.int =TRUE,xlab ="Time in months",
ggtheme =theme_light(),
ncensor.plot = TRUE)
packageVersion("pathview")
#save(expr,exprSet,meta,roc.list,file=file.path('Rdata/','TCGA_RPKM_8circRNA_ROC_patch.Rdata'))
load(  file =
file.path('Rdata/','TCGA_RPKM_8circRNA_ROC_patch.Rdata'))
View(meta)
meta$T_stage2=ifelse(meta$T_stage1 == 'high',1,0)
roc.list <- roc(BCR ~ Rscore + PSA +Gleason+T_stage2, data = meta)
g.list <- ggroc(roc.list)
g.list
g.list+theme_classic()+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color="darkgrey", linetype="dashed")+
annotate("text",x = .25, y = .32,label = paste("Riskscore = ",round(roc.list[[1]]$auc,3)),color = "red")+
annotate("text",x = .25, y = .24,label = paste("PSA = ",round(roc.list[[2]]$auc,3)),color = "green")+
annotate("text",x = .25, y = .16,label = paste("Gleason  = ",round(roc.list[[3]]$auc,3)),color = "blue")+
annotate("text",x = .25, y = .08,label = paste("Tstage  = ",round(roc.list[[4]]$auc,3)),color = "purple")
library(pROC) # 加载包
library(ggplot2)
#save(expr,exprSet,meta,roc.list,file=file.path('Rdata/','TCGA_RPKM_8circRNA_ROC_patch.Rdata'))
load(  file =
file.path('Rdata/','TCGA_RPKM_8circRNA_ROC_patch.Rdata'))
meta$T_stage2=ifelse(meta$T_stage1 == 'high',1,0)
roc.list <- roc(BCR ~ Rscore + PSA +Gleason+T_stage2, data = meta)
g.list <- ggroc(roc.list)
g.list
g.list+theme_classic()+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color="darkgrey", linetype="dashed")+
annotate("text",x = .25, y = .32,label = paste("Riskscore = ",round(roc.list[[1]]$auc,3)),color = "red")+
annotate("text",x = .25, y = .24,label = paste("PSA = ",round(roc.list[[2]]$auc,3)),color = "green")+
annotate("text",x = .25, y = .16,label = paste("Gleason  = ",round(roc.list[[3]]$auc,3)),color = "blue")+
annotate("text",x = .25, y = .08,label = paste("Tstage  = ",round(roc.list[[4]]$auc,3)),color = "purple")
